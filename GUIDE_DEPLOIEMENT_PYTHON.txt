🎃 GUIDE DE DÉPLOIEMENT PYTHON SUR RENDER 🎃

═══════════════════════════════════════════════════════════════

📋 FICHIERS OBLIGATOIRES POUR RENDER
───────────────────────────────────────────────────────────────

Pour déployer votre bot Discord Python sur Render, vous DEVEZ avoir ces fichiers:

✅ bot.py - Le script principal du bot
✅ requirements.txt - Liste des dépendances Python
✅ runtime.txt - Version de Python à utiliser (optionnel mais recommandé)
✅ render.yaml - Configuration du service Render (optionnel)

═══════════════════════════════════════════════════════════════

ÉTAPE 1: PRÉPARATION DU BOT DISCORD
───────────────────────────────────────────────────────────────

1. Aller sur https://discord.com/developers/applications
2. Cliquer sur "New Application" et donner un nom à votre bot
3. Aller dans l'onglet "Bot"
4. Cliquer sur "Reset Token" et COPIER le token (gardez-le secret!)
5. Activer les "Privileged Gateway Intents":
   ✅ PRESENCE INTENT
   ✅ SERVER MEMBERS INTENT
   ✅ MESSAGE CONTENT INTENT
6. Aller dans "OAuth2" > "URL Generator"
7. Sélectionner:
   - Scopes: "bot"
   - Bot Permissions: 
     ✅ Send Messages
     ✅ Read Messages/View Channels
     ✅ Add Reactions
8. Copier l'URL générée et l'ouvrir dans un navigateur pour inviter le bot

═══════════════════════════════════════════════════════════════

ÉTAPE 2: PRÉPARER LES FICHIERS POUR RENDER
───────────────────────────────────────────────────────────────

Vérifiez que vous avez bien ces fichiers:

📄 requirements.txt (OBLIGATOIRE)
────────────────────────────────
discord.py==2.4.0

📄 runtime.txt (RECOMMANDÉ)
───────────────────────────
python-3.11.0

📄 render.yaml (OPTIONNEL)
──────────────────────────
services:
  - type: worker
    name: halloween-discord-bot
    env: python
    buildCommand: pip install -r requirements.txt
    startCommand: python bot.py
    envVars:
      - key: DISCORD_TOKEN
        sync: false

═══════════════════════════════════════════════════════════════

ÉTAPE 3: DÉPLOIEMENT SUR RENDER
───────────────────────────────────────────────────────────────

Option A: Depuis GitHub (RECOMMANDÉ)
────────────────────────────────────
1. Créer un repository GitHub et pousser votre code:
   
   git init
   git add bot.py requirements.txt runtime.txt render.yaml
   git commit -m "Bot Discord Halloween en Python"
   git branch -M main
   git remote add origin <VOTRE_URL_GITHUB>
   git push -u origin main

2. Aller sur https://render.com et se connecter

3. Cliquer sur "New +" > "Background Worker"

4. Connecter votre repository GitHub

5. Configuration:
   - Name: halloween-discord-bot
   - Environment: Python 3
   - Build Command: pip install -r requirements.txt
   - Start Command: python bot.py
   - Instance Type: Free (ou payant pour plus de stabilité)

Option B: Déploiement manuel depuis Render Dashboard
─────────────────────────────────────────────────────
1. Aller sur https://render.com

2. Cliquer sur "New +" > "Background Worker"

3. Si render.yaml est présent:
   - Render détectera automatiquement la configuration
   - Vérifier que tout est correct
   
4. Si pas de render.yaml:
   - Choisir "Python 3" comme environnement
   - Build Command: pip install -r requirements.txt
   - Start Command: python bot.py

═══════════════════════════════════════════════════════════════

ÉTAPE 4: CONFIGURATION DES VARIABLES D'ENVIRONNEMENT
───────────────────────────────────────────────────────────────

1. Dans votre service Render, aller dans "Environment"

2. Ajouter la variable:
   - Key: DISCORD_TOKEN
   - Value: [VOTRE_TOKEN_DISCORD_ICI]

3. Cliquer sur "Save Changes"

4. Le bot redémarrera automatiquement

═══════════════════════════════════════════════════════════════

ÉTAPE 5: VÉRIFICATION DU DÉPLOIEMENT
───────────────────────────────────────────────────────────────

1. Aller dans l'onglet "Logs" de votre service Render

2. Vous devriez voir:
   ✅ pip install -r requirements.txt
   ✅ Successfully installed discord.py...
   ✅ python bot.py
   ✅ 🎃 Bot connecté en tant que [NOM_DU_BOT]
   ✅ 👻 Prêt à réagir tous les [15-30] messages

3. Le bot est maintenant en ligne 24/7!

═══════════════════════════════════════════════════════════════

COMMANDES DU BOT
───────────────────────────────────────────────────────────────

!points ou !leaderboard - Affiche le classement des joueurs
!stats - Affiche vos statistiques personnelles
!healthboost - Active/désactive le multiplicateur de points x1.5
!help - Affiche l'aide complète

═══════════════════════════════════════════════════════════════

FONCTIONNEMENT
───────────────────────────────────────────────────────────────

Le bot réagit automatiquement tous les 15-30 messages avec un emoji:

👻 Fantôme: 4 points (40% de chance)
🧟 Zombie: 7 points (35% de chance)
💀 Crâne: 10 points (15% de chance)
🔪 Couteau: 12 points (10% de chance)
🐺 Loup: 17 points (9% de chance)
🎃 Citrouille: 31 points (1% de chance - TRÈS RARE!)

Avec Health Boost activé: tous les points sont multipliés par 1.5!

═══════════════════════════════════════════════════════════════

STRUCTURE DES FICHIERS PYTHON
───────────────────────────────────────────────────────────────

Votre projet doit avoir cette structure minimale:

📁 Projet/
├── 📄 bot.py (OBLIGATOIRE - Script principal)
├── 📄 requirements.txt (OBLIGATOIRE - Dépendances)
├── 📄 runtime.txt (RECOMMANDÉ - Version Python)
├── 📄 render.yaml (OPTIONNEL - Config auto)
└── 📄 data.json (CRÉÉ AUTOMATIQUEMENT - Données)

═══════════════════════════════════════════════════════════════

DIFFÉRENCES AVEC NODE.JS
───────────────────────────────────────────────────────────────

❌ PAS BESOIN de:
   - package.json
   - package-lock.json
   - node_modules/
   - npm install

✅ À LA PLACE:
   - requirements.txt (= package.json)
   - runtime.txt (= .nvmrc ou engines)
   - pip install (= npm install)
   - python bot.py (= node bot.js)

═══════════════════════════════════════════════════════════════

NOTES IMPORTANTES
───────────────────────────────────────────────────────────────

✅ Python 3.11 est utilisé (compatible avec discord.py)
✅ Le bot fonctionne sans interruption sur Render
✅ Les données sont sauvegardées dans data.json automatiquement
✅ Render redémarre automatiquement le bot en cas d'erreur
✅ Pour un plan gratuit, le bot peut se mettre en veille après 
   15 min d'inactivité (utilisez un plan payant pour éviter ça)
✅ Les données persistent entre les redémarrages

⚠️  IMPORTANT: requirements.txt est OBLIGATOIRE pour Render
⚠️  Sans requirements.txt, le déploiement échouera
⚠️  runtime.txt est optionnel mais recommandé pour fixer la version Python

═══════════════════════════════════════════════════════════════

DÉPANNAGE
───────────────────────────────────────────────────────────────

❌ Erreur "No module named 'discord'":
   → Vérifier que requirements.txt existe
   → Vérifier que "discord.py" est dans requirements.txt
   → Relancer le build sur Render

❌ Bot ne se connecte pas:
   → Vérifier que DISCORD_TOKEN est correct dans Environment
   → Vérifier les intents dans le Discord Developer Portal

❌ Bot ne réagit pas aux messages:
   → Vérifier que MESSAGE CONTENT INTENT est activé
   → Vérifier les permissions du bot sur le serveur

❌ Erreur "Runtime not supported":
   → Vérifier la version Python dans runtime.txt
   → Utiliser python-3.11.0 ou python-3.10.0

❌ Build échoue sur Render:
   → Vérifier que requirements.txt est à la racine du projet
   → Vérifier la syntaxe dans requirements.txt
   → Regarder les logs de build pour l'erreur exacte

═══════════════════════════════════════════════════════════════

COMMANDES UTILES
───────────────────────────────────────────────────────────────

Test en local:
  python bot.py

Installer les dépendances en local:
  pip install -r requirements.txt

Voir les packages installés:
  pip list

Créer/mettre à jour requirements.txt:
  pip freeze > requirements.txt

═══════════════════════════════════════════════════════════════

Bon Halloween avec Python! 🎃🐍
